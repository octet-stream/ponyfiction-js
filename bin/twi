#!/usr/bin/env node

"use strict"

const {realpathSync, statSync} = require("fs")
const childProcess = require("child_process")

const ROOT = realpathSync(`${__dirname}/../`)
const execSync = childProcess.execSync

const IS_YARN_EXISTS = (function() {
  try {
    execSync("which yarn")
    return true
  } catch (err) {
    return false
  }
})()

process.title = "twi"
process.chdir(ROOT) // Change process.cwd() to Twi root directory

// Install deps (if not exists) before continue
try {
  statSync(`${ROOT}/node_modules`)
} catch (err) {
  if (err.code !== "ENOENT") {
    throw err
  }

  console.log("Install dependencies before you begin.")
  console.log("Please, be patient.")
  execSync(IS_YARN_EXISTS === true ? "yarn" : "npm i", {
    stdio: "inherit"
  })
}

// And then we can use deps from NPM
const commander = require("commander")
const ora = require("ora")()
const pify = require("pify")
const {cross} = require("figures")
const {red} = require("chalk")

const exec = pify(childProcess.exec)

const setEnv = isDev => isDev ? "development" : "production"

/**
 * Process error handler
 *
 * @access private
 */
function onError(err, stackTrace = false) {
  ora.stop()

  if (stackTrace) {
    console.log(red(cross), err)
    console.log(red(cross), err.stack)
  } else {
    ora.text = String(err)
    ora.fail()
  }

  process.exit(1)
}

/**
 * Success callback
 *
 * @access private
 */
function onEnd() {
  ora.text = "Done without errors."
  ora.succeed()
  process.exit(0)
}

/**
 * Make backend app
 *
 * @return Promise
 */
function makeBackend() {
  ora.color = "cyan"
  ora.text = "Making backend app..."
  ora.start()

  return exec(`${ROOT}/bin/cake make`)
}

/**
 * Make frontend app
 *
 * @return Promise
 */
function makeFrontend() {
  ora.color = "yellow"
  ora.text = "Making frontend app..."
  ora.start()

  return require(`${ROOT}/setup/frontend/compiler/main`).default(false)
}

/**
 * Make app components
 *
 * @return Promise
 */
function make(component = "") {
  switch (component) {
    case "backend":
      return makeBackend()
    case "frontend":
      return makeFrontend()
    default:
      return makeBackend().then(() => makeFrontend())
  }
}

function watch() {
  const webpack = require(`${ROOT}/setup/frontend/compiler/main`).default

  return webpack(true)
}

function actionMake(component, cmd) {
  make(component).then(onEnd, err => onError(err, cmd.parent.T))
}

// Actions
function actionWatch(cmd) {
  const onFulfilled = stats => console.log(String(stats))

  watch().then(onFulfilled, err => onError(err, cmd.parent.T))
}

function actionDev(cmd) {
  try {
    var {ok} = require(`${ROOT}/core/logger`).default
    var app = require(`${ROOT}/core/app/main`).default
  } catch (err) {
    return onError(err, cmd.parent.T)
  }

  const onFulfilled = () => ok("Twi has been sucessfully started.")

  const onRejected = err => onError(err, cmd.parent.T)

  app(true)
    .then(onFulfilled, onRejected)
}

function actionMigrate(cmd) {
  const migrate = require(`${ROOT}/setup/backend/migrate`).default
  var __fulfill

  if (cmd.D === true) {
    __fulfill = migrate.importData(cmd.E).then(() => migrate.createSu(cmd.R))
  } else {
    __fulfill = migrate(cmd)
  }

  __fulfill.then(onEnd, onError)
}

function actionSetup(cmd) {
  setEnv(true)

  make()
    .then(() => {
      ora.stop()
      return require(`${ROOT}/setup/backend/setup`).default(cmd)
    })
    .then(onEnd, onError)
}

function actionRun(cmd) {
  setEnv(false)

  try {
    var {ok} = require(`${ROOT}/server/core/logger`).default
    var app = require(`${ROOT}/server/core/base/main`).default
  } catch (err) {
    return onError(err, cmd.parent.T)
  }

  const onFulfilled = () => ok("Twi has been sucessfully started.")

  const onRejected = err => onError(err, cmd.parent.T)

  app(false).then(onFulfilled, onRejected)
}

commander
  .version(require(`${ROOT}/package.json`).version)
  .usage("<command> [options]")

commander
  .option("--stack-trace, -t", "show stack trace on errors")

commander
  .command("setup")
  .alias("s")
  .description("run installer script")
  .option(
    "--skip-register, -s",
    "skip owner account registration (use it ONLY for CI)"
  )
  .option(
    "--register, -r", "create owner account while installation using console"
  )
  .option("--not-erase, -e", "run installer without data erasing")
  .option("--configure, -c", "configure app while installation using console")
  .action(actionSetup)

commander
  .command("migrate")
  .alias("m")
  .description("run only migrations script")
  .option(
    "--skip-register, -s",
    "skip owner account registration (use it ONLY for CI)"
  )
  .option(
    "--register, -r", "create owner account while installation using console"
  )
  .option("--not-erase, -e", "run migrate without data erasing")
  .option("--data-only, -d", "run only data imports")
  .action(actionMigrate)

commander
  .command("make [component]")
  .alias("m")
  .description("Build Twi components")
  .action(actionMake)

commander
  .command("watch")
  .alias("w")
  .description("Run Twi with dev static server")
  .action(actionWatch)

commander
  .command("dev")
  .alias("d")
  .description("Run Twi app in development env (without static server)")
  .action(actionDev)

commander
  .command("run")
  .alias("r")
  .description("run Twi app")
  .action(actionRun)

commander
  .parse(process.argv)

process
  .on("error", onError)
  .on("SIGINT", () => process.exit(0))
