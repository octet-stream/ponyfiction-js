#!/usr/bin/env node

"use strict"

const {ROOT, tryDeps} = require("./helper")
const {exec} = require("child_process")

process.title = "twi"
process.chdir(ROOT) // Change process.cwd() to Twi root directory

// Install deps (if not exists) before continue
tryDeps()

// And then we can use deps from NPM
const commander = require("commander")
const ora = require("ora")()
const {cross} = require("figures")
const {red} = require("chalk")

const setEnv = isDev => isDev ? "development" : "production"

/**
 * Process error handler
 *
 * @access private
 */
function onError(err, stackTrace = false) {
  ora.stop()

  if (stackTrace) {
    console.log(red(cross), err)
    console.log(red(cross), err.stack)
  } else {
    ora.text = String(err)
    ora.fail()
  }

  process.exit(1)
}

/**
 * Success callback
 *
 * @access private
 */
function onEnd() {
  ora.text = "Done without errors."
  ora.succeed()
  process.exit(0)
}

/**
 * Run webpack compiler for specified env
 *
 * @param boolean isDev
 */
const runCompiler = isDev => new Promise(function(resolve, reject) {
  try {
    var compiler = require(`${ROOT}/setup/frontend/compiler/main`).default
  } catch (err) {
    return reject(err)
  }

  const fulfill = () => compiler(isDev).then(resolve, reject)

  exec(`${ROOT}/node_modules/.bin/gulp make`, fulfill)
})

/**
 * Make backend app
 *
 * @return Promise
 */
function makeBackend(cb) {
  ora.color = "cyan"
  ora.text = "Making backend app..."
  ora.start()

  exec(`${ROOT}/bin/cake make`, cb)
}

/**
 * Make frontend app
 *
 * @return Promise
 */
function makeFrontend() {
  ora.color = "yellow"
  ora.text = "Making frontend app..."
  ora.start()

  return runCompiler(false)
}

/**
 * Make app components
 *
 * @param component
 */
function make(component, cmd) {
  setEnv(false) // set NODE_ENV to production

  const onRejected = err => onError(err, cmd.parent.T)

  const fulfill = onlyServer => function(err) {
    if (err) {
      return onRejected(err)
    }

    onlyServer ? onEnd() : makeFrontend().then(onEnd, onRejected)
  }

  switch (component) {
    case "backend":
      return makeBackend(fulfill(true))
    case "frontend":
      return makeFrontend().then(onEnd, onError)
    default:
      return makeBackend(fulfill(false))
  }
}

function watch(stackTrace) {
  setEnv(true) // set NODE_ENV to deveopment

  const onFulfilled = stats => stats && console.log(String(stats))

  const onRejected = err => onError(err, stackTrace)

  runCompiler(true).then(onFulfilled, onRejected)
}

function dev(stackTrace) {
  setEnv(true)

  try {
    var {ok} = require(`${ROOT}/server/core/log`)
    var app = require(`${ROOT}/server/core/base/main`).default
  } catch (err) {
    return onError(err, stackTrace)
  }

  const onFulfilled = () => ok("Twi has been sucessfully started.")

  const onRejected = err => onError(err, stackTrace)

  app(true).then(onFulfilled, onRejected)
}

function migrate(cmd) {
  setEnv(false)

  const migrate = require(`${ROOT}/setup/backend/migrate`).default

  var promise
  if (cmd.D) {
    promise = migrate.importData(cmd.E).then(() => migrate.createSu(cmd.R))
  } else {
    promise = migrate(cmd)
  }

  promise.then(onEnd, onError)
}

function setup(cmd) {
  setEnv(false)

  function onFulfilled() {
    ora.stop()

    return require(`${ROOT}/setup/backend/setup`).default(cmd)
  }

  make(undefined, cmd)
    .then(onFulfilled).then(onEnd, onError)
}

function run(stackTrace) {
  setEnv(false)

  try {
    var {ok} = require(`${ROOT}/server/core/log`).default
    var app = require(`${ROOT}/server/core/base/main`).default
  } catch (err) {
    return onError(err, stackTrace)
  }

  const onFulfilled = () => ok("Twi has been sucessfully started.")

  const onRejected = err => onError(err, stackTrace)

  app(false).then(onFulfilled, onRejected)
}

// Build Twi fron the source
const actionMake = (component, cmd) => make(component, cmd)

// Run Webpack compiler for development (with devServer)
// Important note: do not use this command with `twi run`
const actionWatch = cmd => watch(cmd.parent.T)

// Run only Twi miration (without full setup)
const actionMigrate = cmd => migrate(cmd)

// Run Twi setup scripts
const actionSetup = cmd => setup(cmd)

// Run Twi without static server (only for development)
const actionDev = cmd => dev(cmd.parent.T)

// Run Twi app for production
const actionRun = cmd => run(cmd.parent.T)

commander
  .version(require(`${ROOT}/package.json`).version)
  .usage("<command> [options]")

commander
  .option("--stack-trace, -t", "show stack trace on errors")

commander
  .command("setup")
  .alias("s")
  .description("run installer script")
  .option(
    "--skip-register, -s",
    "skip owner account registration (use it ONLY for CI)"
  )
  .option(
    "--register, -r", "create owner account while installation using console"
  )
  .option("--not-erase, -e", "run installer without data erasing")
  .option("--configure, -c", "configure app while installation using console")
  .action(actionSetup)

commander
  .command("migrate")
  .alias("m")
  .description("run only migrations script")
  .option(
    "--skip-register, -s",
    "skip owner account registration (use it ONLY for CI)"
  )
  .option(
    "--register, -r", "create owner account while installation using console"
  )
  .option("--not-erase, -e", "run migrate without data erasing")
  .option("--data-only, -d", "run only data imports")
  .action(actionMigrate)

commander
  .command("make [component]")
  .alias("m")
  .description("Build Twi components")
  .action(actionMake)

commander
  .command("watch")
  .alias("w")
  .description("Run Twi with dev static server")
  .action(actionWatch)

commander
  .command("dev")
  .alias("d")
  .description("Run Twi app in development env (without static server)")
  .action(actionDev)

commander
  .command("run")
  .alias("r")
  .description("run Twi app")
  .action(actionRun)

commander
  .parse(process.argv)

process
  .on("error", onError)
  .on("SIGINT", () => process.exit(0))
